# --> 매수
senti_word %>%
filter(str_detect(word, "소각")) %>% View()
# --> 자사주매입 후 소각 2.11 5%증가
senti_word %>%
filter(str_detect(word, "소각해")) %>% View()
# --> 자사주매입 후 소각 2.11 5%증가
senti_word %>%
filter(str_detect(word, "오늘")) %>% View()
# --> NA값, 중립으로 분류
# ----------------------------------------------------
# 감정사전에 해당 단어 확인
knu_dic %>% filter(word %in% c("대단하다"))
knu_dic %>% filter(word %in% c("사다")) # 사전에 없음
knu_dic %>% filter(word %in% c("가다")) # 사전에 없음
knu_dic %>% filter(word %in% c("많다")) # 2
knu_dic %>% filter(word %in% c("네이버")) # 사전에 없음
knu_dic %>% filter(word %in% c("상하다")) # -2
knu_dic %>% filter(word %in% c("오르다")) # 사전에 없음
knu_dic %>% filter(word %in% c("팔다")) # 사전에 없음
knu_dic %>% filter(word %in% c("매수")) # 사전에 없음
knu_dic %>% filter(word %in% c("진짜")) # 사전에 없음
knu_dic %>% filter(word %in% c("조정")) # 사전에 없음
knu_dic %>% filter(word %in% c("내리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("빠지다")) # 사전에 없음
knu_dic %>% filter(word %in% c("하락")) # 사전에 없음
knu_dic %>% filter(word %in% c("상승")) # 사전에 없음
knu_dic %>% filter(word %in% c("털다")) # 사전에 없음
knu_dic %>% filter(word %in% c("물리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("올리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("호재")) # 사전에 없음
knu_dic %>% filter(word %in% c("폭락")) # 사전에 없음
knu_dic %>% filter(word %in% c("반등")) # 사전에 없음
knu_dic %>% filter(word %in% c("던지다")) # 사전에 없음
knu_dic %>% filter(word %in% c("거품")) # 사전에 없음
knu_dic %>% filter(word %in% c("먹다")) # 사전에 없음
knu_dic %>% filter(word %in% c("가즈")) # 사전에 없음
knu_dic %>% filter(word %in% c("바닥")) # 사전에 없음
knu_dic %>% filter(word %in% c("카카오페이")) # 사전에 없음
knu_dic %>% filter(word %in% c("끝나다")) # 사전에 없음
knu_dic %>% filter(word %in% c("악재")) # 사전에 없음
knu_dic %>% filter(word %in% c("떨어지")) # 사전에 없음
knu_dic %>% filter(word %in% c("카뱅")) # 사전에 없음
knu_dic %>% filter(word %in% c("고점")) # 사전에 없음
knu_dic %>% filter(word %in% c("기다리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("규제")) # 사전에 없음
knu_dic %>% filter(word %in% c("기회")) # 사전에 없음
knu_dic %>% filter(word %in% c("빼다")) # 사전에 없음
knu_dic %>% filter(word %in% c("카카오뱅크")) # 사전에 없음
knu_dic %>% filter(word %in% c("단타")) # 사전에 없음
knu_dic %>% filter(word %in% c("손절")) # 사전에 없음
knu_dic %>% filter(word %in% c("매도")) # 사전에 없음
knu_dic %>% filter(word %in% c("미치다")) # 사전에 없음
knu_dic %>% filter(word %in% c("저점")) # 사전에 없음
knu_dic %>% filter(word %in% c("싸다")) # 사전에 없음
knu_dic %>% filter(word %in% c("버티다")) # 사전에 없음
knu_dic %>% filter(word %in% c("뭐하다")) # 사전에 없음
knu_dic %>% filter(word %in% c("아가리")) # 사전에 없음
knu_dic %>% filter(word %in% c("폭등")) # 사전에 없음
knu_dic %>% filter(word %in% c("흐르다")) # 사전에 없음
knu_dic %>% filter(word %in% c("담다")) # 사전에 없음
knu_dic %>% filter(word %in% c("액분")) # 사전에 없음
knu_dic %>% filter(word %in% c("액변분할")) # 사전에 없음
knu_dic %>% filter(word %in% c("탈출")) # 사전에 없음
knu_dic %>% filter(word %in% c("돌파")) # 사전에 없음
knu_dic %>% filter(word %in% c("쓰레기")) # 사전에 없음
knu_dic %>% filter(word %in% c("정권")) # 사전에 없음
knu_dic %>% filter(word %in% c("인수")) # 사전에 없음
knu_dic %>% filter(word %in% c("달리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("급등")) # 사전에 없음
knu_dic %>% filter(word %in% c("반토막")) # 사전에 없음
knu_dic %>% filter(word %in% c("완전")) # 사전에 없음
knu_dic %>% filter(word %in% c("터지다")) # 사전에 없음
knu_dic %>% filter(word %in% c("살리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("개잡주")) # 사전에 없음
knu_dic %>% filter(word %in% c("올랐")) # 사전에 없음
knu_dic %>% filter(word %in% c("힘내다")) # 사전에 없음
knu_dic %>% filter(word %in% c("가즈아")) # 사전에 없음
knu_dic %>% filter(word %in% c("탈세")) # 사전에 없음
knu_dic %>% filter(word %in% c("회복")) # 사전에 없음
knu_dic %>% filter(word %in% c("우상향")) # 사전에 없음
knu_dic %>% filter(word %in% c("진심")) # 사전에 없음
knu_dic %>% filter(word %in% c("주도주")) # 사전에 없음
knu_dic %>% filter(word %in% c("나락")) # 사전에 없음
knu_dic %>% filter(word %in% c("보유")) # 사전에 없음
knu_dic %>% filter(word %in% c("팔았")) # 사전에 없음
knu_dic %>% filter(word %in% c("존버")) # 사전에 없음
knu_dic %>% filter(word %in% c("국민주")) # 사전에 없음
knu_dic %>% filter(word %in% c("매입")) # 사전에 없음
knu_dic %>% filter(word %in% c("대장")) # 사전에 없음
knu_dic %>% filter(word %in% c("물적분할")) # 사전에 없음
knu_dic %>% filter(word %in% c("줍다")) # 사전에 없음
knu_dic %>% filter(word %in% c("정권")) # 사전에 없음
knu_dic %>% filter(word %in% c("매수세")) # 사전에 없음
knu_dic %>% filter(word %in% c("문어발")) # 사전에 없음
knu_dic %>% filter(word %in% c("살리다")) # 사전에 없음
knu_dic %>% filter(word %in% c("고평가")) # 사전에 없음
knu_dic %>% filter(word %in% c("대박")) # 사전에 없음
knu_dic %>% filter(word %in% c("이걸")) # 사전에 없음
knu_dic %>% filter(word %in% c("담다")) # 사전에 없음
knu_dic %>% filter(word %in% c("저가매수")) # 사전에 없음
knu_dic %>% filter(word %in% c("소각")) # 사전에 없음
knu_dic %>% filter(word %in% c("소각해")) # 사전에 없음
# 새로운 감정사전에 수정
# 해당 단어가 사전에 포함되지않아서 추가
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","사다","가다","네이버","오르다",
"팔다","매수","진짜", "조정","내리다",
"빠지다","하락","상승","털다","물리다",
"올리다","호재","폭락","반등","던지다",
"거품","먹다","가즈","바닥","카카오페이",
"끝나다","악재","떨어지","카뱅","고점",
"기다리다","규제","기회","빼다","카카오뱅크",
"단타","손절",'매도','미치다',"저점",
'싸다','버티다','뭐하다','아가리','폭등',
'흐르다','담다','액분','액면분할','탈출',
'돌파','쓰레기','정권','인수','달리다',
'급등','반토막','완전','살리다','개잡주',
'올랐','힘내다','가즈아','탈세','회복',
'우상향','진심','주도주','나락','보유',
'팔았','존버','국민주','매입','대장',
'물적분할','줍다','매수세','문어발','살리다',
'고평가','대박','이걸','담다','저가매수',
'소각','소각해'),
polarity=c(-1,1,1,-1,1,
-1,1,-1,-1,-1,
-1,-1,1,-1,-1,
1,1,-1,1,-1,
-1,1,1,-1,1,
-1,-1,-1,1,1,
1,-1,1,-1,1,
1,-1,-1,-1,-1,
-1,1,-1,1,1,
-1,1,1,1,-1,
1,-2,-1,1,1,
1,-1,-1,-1,-1,
1,1,1,-1,1,
1,-1,1,-1,1,
-1,1,1,1,1,
-1,1,1,-1,-1,
-1,1,-1,1,1,
1,1)))
# 사전에 있는 단어는 점수만 수정
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("대단하다","대단한"), -2, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("많다"), 0, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("상하다"), 2, polarity))
# ----------------------------------------------------
# 확인
tail(knu_dic2,20)
write.csv(knu_dic2, "data/단어합본.csv")
senti_word %>%
filter(str_detect(word, "안팔면")) %>% View()
senti_word %>%
filter(str_detect(word, "역전")) %>% View()
senti_word %>%
filter(str_detect(word, "만기일")) %>% View()
senti_word %>%
filter(str_detect(word, "바뀌")) %>% View()
senti_word %>%
filter(str_detect(word, "꽉잡아")) %>% View()
senti_word %>%
filter(str_detect(word, "꽂다")) %>% View()
senti_word %>%
filter(str_detect(word, "지능순")) %>% View()
senti_word %>%
filter(str_detect(word, "제치다")) %>% View()
senti_word %>%
filter(str_detect(word, "저렴")) %>% View()
senti_word %>%
filter(str_detect(word, "어우")) %>% View()
senti_word %>%
filter(str_detect(word, "애개뤼")) %>% View()
senti_word %>%
filter(str_detect(word, "쓰레")) %>% View()
senti_word %>%
filter(str_detect(word, "아웃")) %>% View()
senti_word %>%
filter(str_detect(word, "아깝")) %>% View()
senti_word %>%
filter(str_detect(word, "실적발")) %>% View()
senti_word %>%
filter(str_detect(word, "미친거")) %>% View()
senti_word %>%
filter(str_detect(word, "발생")) %>% View()
senti_word %>%
filter(str_detect(word, "당기순이익")) %>% View()
senti_word %>%
filter(str_detect(word, "놀라다")) %>% View()
senti_word %>%
filter(str_detect(word, "꺽이다")) %>% View()
senti_word %>%
filter(str_detect(word, "가르치다")) %>% View()
senti_word %>%
filter(str_detect(word, "강성주주")) %>% View()
senti_word %>%
filter(str_detect(word, "운전")) %>% View()
knu_dic %>% filter(word %in% c("축하")) # 사전 점수가 2개여서 삭제하고 다시 추가
senti_word %>%
filter(str_detect(word, "최고가")) %>% View()
senti_word %>%
filter(str_detect(word, "신기")) %>% View()
senti_word %>%
filter(str_detect(word, "얼다")) %>% View()
senti_word %>%
filter(str_detect(word, "무증")) %>% View()
senti_word %>%
filter(str_detect(word, "챙기다")) %>% View()
senti_word %>%
filter(str_detect(word, "잊다")) %>% View()
senti_word %>%
filter(str_detect(word, "차리다")) %>% View()
senti_word %>%
filter(str_detect(word, "따다")) %>% View()
senti_word %>%
filter(str_detect(word, "안사")) %>% View()
senti_word %>%
filter(str_detect(word, "들어갑니")) %>% View()
knu_dic %>% filter(word %in% c("행복")) # 사전 점수가 2개여서 삭제하고 다시 추가
senti_word %>%
filter(str_detect(word, "불타다")) %>% View()
knu_dic %>% filter(word %in% c("불법")) # 사전 점수가 2개여서 삭제하고 다시 추가
senti_word %>%
filter(str_detect(word, "위선자")) %>% View()
senti_word %>%
filter(str_detect(word, "독과점")) %>% View()
senti_word %>%
filter(str_detect(word, "낙폭")) %>% View()
senti_word %>%
filter(str_detect(word, "불나방")) %>% View()
senti_word %>%
filter(str_detect(word, "개떡")) %>% View()
# 단어별로 카운트
count_senti <- senti_word %>%
count(word, polarity) %>% arrange(-n)
senti_word %>%
filter(str_detect(word, "팔아먹다")) %>% View()
senti_word %>%
filter(str_detect(word, "효자")) %>% View()
# 종목토론실_단어count.csv 가져오기
# Sys.setlocale("LC_ALL", "C")
sentiword_count <- read.csv("data/종목토론실_단어count.csv", header=T, sep=",", encoding="UTF-8")
sentiword_count
# 종목토론실_단어count.csv 가져오기
# Sys.setlocale("LC_ALL", "C")
sentiword_count <- read.csv("data/종목토론실_단어count.csv", header=T, sep=",", encoding="UTF-8")
sentiword_count
nrow(sentiword_count)
nrow(count_senti)
sentiword_count[sentiword_count(sentiword_count$word),]
sentiword_count[duplicated(sentiword_count$word),]
View(sentiword_count[duplicated(sentiword_count$word),])
sentiword_count %>%
count(word) %>% arrange(-n)
sentiword_count %>%
count(word) %>% arrange(-n) %>% View()
sentiword_count %>%
count(word) %>% View()
sentiword_count %>%
count(word) %>% filter(n > 2) %>%  View()
sentiword_count %>%
count(word) %>% filter(n > 1) %>%  View()
sentiword_count <- sentiword_count[!duplicated(sentiword_count$word),]
nrow(sentiword_count) # 97332행
nrow(count_senti)
# 새로 리베이스한 단어합본.csv 가져오기
knu_dic <- read.csv("data/단어합본.csv", header=T, sep=",", encoding="UTF-8")
# 새로 리베이스한 단어합본.csv 가져오기
knu_dic <- read.csv("data/단어합본.csv", header=T, sep=",", encoding="UTF-8")
knu_dic
nrow(knu_dic)
tail(knu_dic)
nrow(sentiword_count) # 97116행
nrow(knu_dic)
# 새로 리베이스한 단어합본.csv 가져오기
knu_dic <- read.csv("data/단어합본.csv", header=T, sep=",", encoding="UTF-8")
knu_dic
# 새로 리베이스한 단어합본.csv 가져오기
knu_dic <- read_csv("data/단어합본.csv")
# 새로 리베이스한 단어합본.csv 가져오기
Sys.setlocale("LC_ALL", "C")
knu_dic <- read_csv("data/단어합본.csv")
Sys.setlocale("LC_ALL", "Korean")
# Sys.setlocale("LC_ALL", "Korean")
tail(knu_dic)
nrow(knu_dic) #16134
head(sentiword_count)
sentiword_count[,-1]
sentiword_count[,c(-1,-4)]
# word, polarity 컬럼만 추출
sentiword_count <- sentiword_count[,c(-1,-4)]
nrow(sentiword_count) # 97116행
sentiword_count[1, 'word']
# Sys.setlocale("LC_ALL", "Korean")
tail(knu_dic)
knu_dic[,-1]
# word, polarity 컬럼만 추출
knu_dic <- knu_dic[,-1]
knu_dic
t = as.character(sentiword_count[1, 'word'])
t
knu_dic$word %in% t
sum(knu_dic$word %in% t)
sum(knu_dic$word %in% t) == 0
sentiword_count[1,]
knu_dic[knu_dic$word == t, 'polarity']
knu_dic %>%
filter(str_detect(word, "카카오")) %>% View()
# 복사본
knu_dic2 <- knu_dic
knu_dic3 <- knu_dic2
# sentiword_count 에서
# 1행부터 행 총 개수(97116행)만큼 순서대로 i에 대입
for (i in 1:nrow(sentiword_count)){
t = as.character(sentiword_count[i, 'word'])
# 사전에 t(i행의 단어)가 없으면 : 카카오는 F
if(sum(knu_dic$word %in% t) == 0){
# i 행의 극성점수가 na값이 아니면
if(is.na(sentiword_count$polarity[i]) == F) {
# 새로운 사전에 추가한다.
knu_dic2 <- rbind(knu_dic2, sentiword_count[i,])
}
} else {
# 사전 word컬럼에 i 행의 단어가 있음
# polarity 값이 다르다면 count에 있는 polarity값을 dic polarity값으로 변경
if (knu_dic[knu_dic$word == t, 'polarity'] != sentiword_count[sentiword_count$word == t, 'polarity']) {
knu_dic2[knu_dic2$word == t, 'polarity'] <- sentiword_count[sentiword_count$word == t, 'polarity']
}
}
}
# sentiword_count 에서
# 1행부터 행 총 개수(97116행)만큼 순서대로 i에 대입
for (i in 1:nrow(sentiword_count)){
t = as.character(sentiword_count[i, 'word'])
# 사전에 t(i행의 단어)가 없으면 : 카카오는 F
if(sum(knu_dic$word %in% t) == 0){
# i 행의 극성점수가 na값이 아니면
if(is.na(sentiword_count$polarity[i]) == F) {
# 새로운 사전에 추가한다.
knu_dic2 <- rbind(knu_dic2, sentiword_count[i,])
}
} else {
# 사전 word컬럼에 i 행의 단어가 있음
# polarity 값이 다르다면 count에 있는 polarity값을 dic polarity값으로 변경
if (knu_dic[knu_dic$word == t, 'polarity'] != sentiword_count[sentiword_count$word == t, 'polarity']) {
if(is.na(sentiword_count$polarity[i]) == F) {
knu_dic2[knu_dic2$word == t, 'polarity'] <- sentiword_count[sentiword_count$word == t, 'polarity']
}
}
}
}
View(knu_dic2)
nrow(knu_dic2)
View(sentiword_count)
is.na(sentiword_count)
sentiword_count[!is.na(sentiword_count),]
sentiword_count[!is.na(sentiword_count$polarity),]
# NA값 제외하고 추출
sentiword_count <- sentiword_count[!is.na(sentiword_count$polarity),]
View(sentiword_count)
nrow(sentiword_count) # 97116행
# sentiword_count 에서
# 1행부터 행 총 개수(97116행)만큼 순서대로 i에 대입
for (i in 1:nrow(sentiword_count)){
t = as.character(sentiword_count[i, 'word'])
# 사전에 t(i행의 단어)가 없으면 : 카카오는 F
if(sum(knu_dic$word %in% t) == 0){
# i 행의 극성점수가 na값이 아니면
if(is.na(sentiword_count$polarity[i]) == F) {
# 새로운 사전에 추가한다.
knu_dic2 <- rbind(knu_dic2, sentiword_count[i,])
}
} else {
# 사전 word컬럼에 i 행의 단어가 있음
# polarity 값이 다르다면 count에 있는 polarity값을 dic polarity값으로 변경
if (knu_dic[knu_dic$word == t, 'polarity'] != sentiword_count[sentiword_count$word == t, 'polarity']) {
if(is.na(sentiword_count$polarity[i]) == F) {
knu_dic2[knu_dic2$word == t, 'polarity'] <- sentiword_count[sentiword_count$word == t, 'polarity']
}
}
}
}
}
# sentiword_count 에서
# 1행부터 행 총 개수(97116행)만큼 순서대로 i에 대입
for (i in 1:nrow(sentiword_count)){
t = as.character(sentiword_count[i, 'word'])
# 사전에 t(i행의 단어)가 없으면 : 카카오는 F
if(sum(knu_dic$word %in% t) == 0){
knu_dic2 <- rbind(knu_dic2, sentiword_count[i,])
} else {
# 사전 word컬럼에 i 행의 단어가 있음
# polarity 값이 다르다면 count에 있는 polarity값을 dic polarity값으로 변경
if (knu_dic[knu_dic$word == t, 'polarity'] != sentiword_count[sentiword_count$word == t, 'polarity']) {
knu_dic2[knu_dic2$word == t, 'polarity'] <- sentiword_count[sentiword_count$word == t, 'polarity']
}
}
}
sum(is.na(knu_dic))
knu_dic
sum(is.na(knu_dic))
is.na(knu_dic)
knu_dic %>%
filter(polarity == NA)) %>% View()
knu_dic %>%
filter(polarity == NA) %>% View()
knu_dic %>% filter(polarity == NA) %>% View()
knu_dic %>% filter(word == NA) %>% View()
knu_dic[which(NA)]
knu_dic[which(polarity==NA)]
knu_dic
knu_dic[which(polarity == NA)]
View(knu_dic)
sum(is.na(knu_dic))
sum(is.na(knu_dic$word)) # 2개
sum(is.na(knu_dic$polarity)) # 2개
knu_dic[!is.na(knu_dic),]
knu_dic <- knu_dic[!is.na(knu_dic),!is.na(knu_dic)]
knu_dic <- knu_dic[!is.na(knu_dic)]
na.omit(knu_dic)
knu_dic <- na.omit(knu_dic)
# NA값 확인후 제거
sum(is.na(knu_dic)) # 2개
knu_dic2 <- knu_dic
knu_dic3 <- knu_dic2
# sentiword_count 에서
# 1행부터 행 총 개수(97116행)만큼 순서대로 i에 대입
for (i in 1:nrow(sentiword_count)){
t = as.character(sentiword_count[i, 'word'])
# 사전에 t(i행의 단어)가 없으면 : 카카오는 F
if(sum(knu_dic$word %in% t) == 0){
knu_dic2 <- rbind(knu_dic2, sentiword_count[i,])
} else {
# 사전 word컬럼에 i 행의 단어가 있음
# polarity 값이 다르다면 count에 있는 polarity값을 dic polarity값으로 변경
if (knu_dic[knu_dic$word == t, 'polarity'] != sentiword_count[sentiword_count$word == t, 'polarity']) {
knu_dic2[knu_dic2$word == t, 'polarity'] <- sentiword_count[sentiword_count$word == t, 'polarity']
}
}
}
View(knu_dic2)
nrow(knu_dic2)
nrow(knu_dic) #17544행
# --> 점수가 2개임
knu_dic %>% filter(word %in% c("개미")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic %>% filter(word %in% c("단타")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic %>% filter(word %in% c("고평가")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic %>% filter(word %in% c("마이너스")) # 사전 점수가 2개여서 삭제하고 다시 추가
# --> 점수가 2개임
knu_dic2 %>% filter(word %in% c("개미")) # 사전 점수가 2개여서 삭제하고 다시 추가
View(knu_dic)
knu_dic2 %>% filter(word %in% c("잘못")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 %>% filter(word %in% c("개미")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='개미')
knu_dic2 %>% filter(word %in% c("단타")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='단타')
knu_dic2 %>% filter(word %in% c("고평가")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='고평가')
knu_dic2 %>% filter(word %in% c("마이너스")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='마이너스')
knu_dic2 %>% filter(word %in% c("무너지다")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='무너지다')
knu_dic2 %>% filter(word %in% c("후회")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='후회')
knu_dic2 %>% filter(word %in% c("나쁘다")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='나쁘다')
knu_dic2 %>% filter(word %in% c("물리다")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='물리다')
knu_dic2 %>% filter(word %in% c("울다")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='울다')
knu_dic2 %>% filter(word %in% c("잘못")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='잘못')
knu_dic2 %>% filter(word %in% c("혁신")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='혁신')
knu_dic2 %>% filter(word %in% c("독점")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='독점')
knu_dic2 %>% filter(word %in% c("싸우다")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='싸우다')
knu_dic2 %>% filter(word %in% c("소각")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='소각')
knu_dic2 %>% filter(word %in% c("액면분할")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='액면분할')
knu_dic2 %>% filter(word %in% c("부자")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='부자')
knu_dic2 %>% filter(word %in% c("성공")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='성공')
knu_dic2 %>% filter(word %in% c("대출")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='대출')
knu_dic2 %>% filter(word %in% c("횡령")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='횡령')
knu_dic2 %>% filter(word %in% c("축하")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='축하')
knu_dic2 %>% filter(word %in% c("행복")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='행복')
knu_dic2 %>% filter(word %in% c("불법")) # 사전 점수가 2개여서 삭제하고 다시 추가
knu_dic2 <- subset(knu_dic2, word!='불법')
new_dic <- data.frame(word=c('개미','고평가','마이너스','무너지다','후회',
'나쁘다',"물리다","울다","잘못","혁신",
"독점","싸우다","액면분할","부자","성공",
'대출','횡령','축하','행복','불법'),
polarity=c(0,-1,-1,-2,-2,
-1,-1,-1,-1,1,
-1,-1,1,1,2,
0,-2,1,2,-2))
knu_dic3 <- rbind(knu_dic2, new_dic)
nrow(knu_dic3)
# 확인
View(knu_dic3)
write.csv(knu_dic3, "data/단어합본.csv")
# 확인
View(knu_dic3)
