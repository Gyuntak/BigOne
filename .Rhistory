"오르다","팔다","매수","진짜", "조정",
"내리다","빠지다","하락","상승","털다"),
polarity=c(-1,-1,1,1,-1,
1,-1,1,-1,-1,
-1,-1,-1,1,-1)))
knu_dic %>% filter(word %in% c("털다")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "물리다")) %>% View()
senti_word %>%
filter(str_detect(word, "올리다")) %>% View()
knu_dic %>% filter(word %in% c("올리다")) # 사전에 없음
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","만원","사다","가다","네이버",
"오르다","팔다","매수","진짜", "조정",
"내리다","빠지다","하락","상승","털다",
"물리다", "올리다"),
polarity=c(-1,-1,1,1,-1,
1,-1,1,-1,-1,
-1,-1,-1,1,-1,
-1,1)))
# 대단하다 점수 +2 -> -2 로 수정
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("대단하다","대단한"), -2, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("많다"), 0, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("상하다"), 2, polarity))
# ----------------------------------------------------
# 확인
tail(knu_dic2,11)
######################## 다시 감정점수 분류
senti_word <- word_discuss_done %>%
left_join(knu_dic2, by = "word") %>%
mutate(polarity = ifelse(is.na(polarity), 0, polarity))
## polarity 점수별로 긍정/부정/중립 분류
senti_word2 <- senti_word %>%
mutate(sentiment = ifelse(polarity >= 1, "pos",
ifelse(polarity <= -1, "neg", "neu")))
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
#filter(sentiment != "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>%
slice_max(n, n = 50)
top10_senti
# ------> 그래프
ggplot(top10_senti, aes(x = reorder(word, n),
y = n,
fill = sentiment)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
facet_wrap(~ sentiment, scales = "free") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(x = NULL)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
#filter(sentiment != "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>%
slice_max(n, n = 60)
# ------> 그래프
ggplot(top10_senti, aes(x = reorder(word, n),
y = n,
fill = sentiment)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
facet_wrap(~ sentiment, scales = "free") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(x = NULL)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
#filter(sentiment != "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>%
slice_max(n, n = 100)
# ------> 그래프
ggplot(top10_senti, aes(x = reorder(word, n),
y = n,
fill = sentiment)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
facet_wrap(~ sentiment, scales = "free") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(x = NULL)
senti_word %>%
filter(str_detect(word, "호재")) %>% View()
knu_dic %>% filter(word %in% c("호재")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "폭락")) %>% View()
knu_dic %>% filter(word %in% c("폭락")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "반등")) %>% View()
knu_dic %>% filter(word %in% c("반등")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "만원대")) %>% View()
senti_word %>%
filter(str_detect(word, "만원")) %>% View()
senti_word %>%
filter(str_detect(word, "던지다")) %>% View()
knu_dic %>% filter(word %in% c("던지다"))
senti_word %>%
filter(str_detect(word, "거품")) %>% View()
knu_dic %>% filter(word %in% c("거품")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "먹다")) %>% View()
knu_dic %>% filter(word %in% c("먹다")) # 사전에 없음
# 새로운 감정사전에 수정
# 해당 단어가 사전에 포함되지않아서 추가
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","","사다","가다","네이버","오르다",
"팔다","매수","진짜", "조정","내리다",
"빠지다","하락","상승","털다","물리다",
"올리다","호재","폭락","반등","던지다",
"거품","먹다"),
polarity=c(-1,1,1,-1,1,
-1,1,-1,-1,-1,
-1,-1,1,-1,-1,
1,1,-1,1,-1,
-1,1)))
# 대단하다 점수 +2 -> -2 로 수정
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("대단하다","대단한"), -2, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("많다"), 0, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("상하다"), 2, polarity))
# ----------------------------------------------------
# 확인
tail(knu_dic2,11)
######################## 다시 감정점수 분류
senti_word <- word_discuss_done %>%
left_join(knu_dic2, by = "word") %>%
mutate(polarity = ifelse(is.na(polarity), 0, polarity))
## polarity 점수별로 긍정/부정/중립 분류
senti_word2 <- senti_word %>%
mutate(sentiment = ifelse(polarity >= 1, "pos",
ifelse(polarity <= -1, "neg", "neu")))
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
#filter(sentiment != "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>%
slice_max(n, n = 100)
top10_senti
# ------> 그래프
ggplot(top10_senti, aes(x = reorder(word, n),
y = n,
fill = sentiment)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
facet_wrap(~ sentiment, scales = "free") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(x = NULL)
# ------> 그래프
ggplot(top10_senti, aes(x = reorder(word, n),
y = n,
fill = sentiment)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
facet_wrap(~ sentiment, scales = "free") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(x = NULL)
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","","사다","가다","네이버","오르다",
"팔다","매수","진짜", "조정","내리다",
"빠지다","하락","상승","털다","물리다",
"올리다","호재","폭락","반등","던지다",
"거품","먹다"),
polarity=c(-1,1,1,-1,1,
-1,1,-1,-1,-1,
-1,-1,1,-1,-1,
1,1,-1,1,-1,
-1,1)))
# 대단하다 점수 +2 -> -2 로 수정
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("대단하다","대단한"), -2, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("많다"), 0, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("상하다"), 2, polarity))
# 새로운 감정사전에 수정
# 해당 단어가 사전에 포함되지않아서 추가
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","","사다","가다","네이버","오르다",
"팔다","매수","진짜", "조정","내리다",
"빠지다","하락","상승","털다","물리다",
"올리다","호재","폭락","반등","던지다",
"거품","먹다"),
polarity=c(-1,1,1,-1,1,
-1,1,-1,-1,-1,
-1,-1,1,-1,-1,
1,1,-1,1,-1,
-1,1)))
# 새로운 감정사전에 수정
# 해당 단어가 사전에 포함되지않아서 추가
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","사다","가다","네이버","오르다",
"팔다","매수","진짜", "조정","내리다",
"빠지다","하락","상승","털다","물리다",
"올리다","호재","폭락","반등","던지다",
"거품","먹다"),
polarity=c(-1,1,1,-1,1,
-1,1,-1,-1,-1,
-1,-1,1,-1,-1,
1,1,-1,1,-1,
-1,1)))
# 대단하다 점수 +2 -> -2 로 수정
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("대단하다","대단한"), -2, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("많다"), 0, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("상하다"), 2, polarity))
# ----------------------------------------------------
# 확인
tail(knu_dic2,11)
######################## 다시 감정점수 분류
senti_word <- word_discuss_done %>%
left_join(knu_dic2, by = "word") %>%
mutate(polarity = ifelse(is.na(polarity), 0, polarity))
## polarity 점수별로 긍정/부정/중립 분류
senti_word2 <- senti_word %>%
mutate(sentiment = ifelse(polarity >= 1, "pos",
ifelse(polarity <= -1, "neg", "neu")))
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
#filter(sentiment != "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>%
slice_max(n, n = 100)
top10_senti
# ------> 그래프
ggplot(top10_senti, aes(x = reorder(word, n),
y = n,
fill = sentiment)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
facet_wrap(~ sentiment, scales = "free") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(x = NULL)
senti_word %>%
filter(str_detect(word, "가즈")) %>% View()
knu_dic %>% filter(word %in% c("가즈")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "찍다")) %>% View()
senti_word %>%
filter(str_detect(word, "바닥")) %>% View()
knu_dic %>% filter(word %in% c("바닥")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "카카오페이")) %>% View()
senti_word %>%
filter(str_detect(word, "끝나다")) %>% View()
senti_word %>%
filter(str_detect(word, "악재")) %>% View()
knu_dic %>% filter(word %in% c("악재")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "떨어지")) %>% View()
knu_dic %>% filter(word %in% c("떨어지")) # 사전에 없음
senti_word %>%
filter(str_detect(word, "카뱅")) %>% View()
knu_dic %>% filter(word %in% c("카뱅")) # 사전에 없음
# 새로운 감정사전에 수정
# 해당 단어가 사전에 포함되지않아서 추가
knu_dic2 <- rbind(knu_dic, data.frame(word=c("대단","사다","가다","네이버","오르다",
"팔다","매수","진짜", "조정","내리다",
"빠지다","하락","상승","털다","물리다",
"올리다","호재","폭락","반등","던지다",
"거품","먹다","가즈","바닥","카카오페이",
"끝나다","악재","떨어지","카뱅"),
polarity=c(-1,1,1,-1,1,
-1,1,-1,-1,-1,
-1,-1,1,-1,-1,
1,1,-1,1,-1,
-1,1,1,-1,1,
-1,-1,-1,1)))
# 대단하다 점수 +2 -> -2 로 수정
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("대단하다","대단한"), -2, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("많다"), 0, polarity))
knu_dic2 <- knu_dic2 %>%
mutate(polarity = ifelse(word %in% c("상하다"), 2, polarity))
# ----------------------------------------------------
# 확인
tail(knu_dic2,11)
######################## 다시 감정점수 분류
senti_word <- word_discuss_done %>%
left_join(knu_dic2, by = "word") %>%
mutate(polarity = ifelse(is.na(polarity), 0, polarity))
## polarity 점수별로 긍정/부정/중립 분류
senti_word2 <- senti_word %>%
mutate(sentiment = ifelse(polarity >= 1, "pos",
ifelse(polarity <= -1, "neg", "neu")))
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
#filter(sentiment != "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>%
slice_max(n, n = 100)
top10_senti <- senti_word2 %>%
filter(sentiment = "neu") %>%
count(sentiment, word) %>%
group_by(sentiment)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment = "neu") %>%
count(sentiment, word) %>%
group_by(sentiment) %>% View()
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment = "neu") %>%
count(sentiment, word) %>% View()
top10_senti <- senti_word2 %>%
filter(sentiment = "neu") %>%
count(sentiment, word) %>% View()
top10_senti <- senti_word2 %>%
filter(sentiment = "neu") %>%
count(sentiment, word)
top10_senti
######################## 다시 감정점수 분류
senti_word <- word_discuss_done %>%
left_join(knu_dic2, by = "word") %>%
mutate(polarity = ifelse(is.na(polarity), 0, polarity))
## polarity 점수별로 긍정/부정/중립 분류
senti_word2 <- senti_word %>%
mutate(sentiment = ifelse(polarity >= 1, "pos",
ifelse(polarity <= -1, "neg", "neu")))
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment = "neu") %>%
count(sentiment, word)
senti_word2
group_by(sentiment)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word)
#slice_max(n, n = 100)
top10_senti
#slice_max(n, n = 100)
View(top10_senti
#slice_max(n, n = 100)
View(top10_senti)
#slice_max(n, n = 100)
View(top10_senti)
#slice_max(n, n = 100)
tail(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n!=1)
#slice_max(n, n = 100)
View(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n!=10)
#slice_max(n, n = 100)
View(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n!=c(1:10))
#slice_max(n, n = 100)
View(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n!=c(1,2,3,4,5,6,7,8,9,10))
#slice_max(n, n = 100)
View(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n!=c(1))
#slice_max(n, n = 100)
View(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n > 10))
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n > 10)
#slice_max(n, n = 100)
View(top10_senti)
### 긍정, 부정단어별 가장 빈도가 많은 20개 추출
top10_senti <- senti_word2 %>%
filter(sentiment == "neu") %>%
count(sentiment, word) %>% filter(n > 100)
#slice_max(n, n = 100)
View(top10_senti)
senti_word %>%
filter(str_detect(word, "고점")) %>% View()
senti_word %>%
filter(str_detect(word, "속보")) %>% View()
senti_word %>%
filter(str_detect(word, "기다리다")) %>% View()
senti_word %>%
filter(str_detect(word, "시간")) %>% View()
senti_word %>%
filter(str_detect(word, "규제")) %>% View()
senti_word %>%
filter(str_detect(word, "잡다")) %>% View()
senti_word %>%
filter(str_detect(word, "기회")) %>% View()
senti_word %>%
filter(str_detect(word, "기회")) %>% View()
senti_word %>%
filter(str_detect(word, "빼다")) %>% View()
senti_word %>%
filter(str_detect(word, "다음주")) %>% View()
senti_word %>%
filter(str_detect(word, "다음")) %>% View()
senti_word %>%
filter(str_detect(word, "카카오뱅크")) %>% View()
senti_word %>%
filter(str_detect(word, "삼성전자")) %>% View()
senti_word %>%
filter(str_detect(word, "모르다")) %>% View()
senti_word %>%
filter(str_detect(word, "단타")) %>% View()
senti_word %>%
filter(str_detect(word, "단타")) %>% View()
senti_word %>%
filter(str_detect(word, "손절")) %>% View()
senti_word %>%
filter(str_detect(word, "매도")) %>% View()
senti_word %>%
filter(str_detect(word, "미치다")) %>% View()
senti_word %>%
filter(str_detect(word, "저점")) %>% View()
senti_word %>%
filter(str_detect(word, "싸다")) %>% View()
senti_word %>%
filter(str_detect(word, "버티다")) %>% View()
senti_word %>%
filter(str_detect(word, "벌다")) %>% View()
senti_word %>%
filter(str_detect(word, "뭐하다")) %>% View()
senti_word %>%
filter(str_detect(word, "아가리")) %>% View()
senti_word %>%
filter(str_detect(word, "폭등")) %>% View()
senti_word %>%
filter(str_detect(word, "흐르다")) %>% View()
senti_word %>%
filter(str_detect(word, "담다")) %>% View()
senti_word %>%
filter(str_detect(word, "대주주")) %>% View()
senti_word %>%
filter(str_detect(word, "예상")) %>% View()
senti_word %>%
filter(str_detect(word, "액분")) %>% View()
senti_word %>%
filter(str_detect(word, "액면분할")) %>% View()
senti_word %>%
filter(str_detect(word, "탈출")) %>% View()
senti_word %>%
filter(str_detect(word, "돌파")) %>% View()
senti_word %>%
filter(str_detect(word, "벌다")) %>% View()
senti_word %>%
filter(str_detect(word, "쓰레기")) %>% View()
senti_word %>%
filter(str_detect(word, "자사주")) %>% View()
senti_word %>%
filter(str_detect(word, "정권")) %>% View()
senti_word %>%
filter(str_detect(word, "인수")) %>% View()
senti_word %>%
filter(str_detect(word, "인수")) %>% View()
senti_word %>%
filter(str_detect(word, "카톡")) %>% View()
senti_word %>%
filter(str_detect(word, "갓카오")) %>% View()
senti_word %>%
filter(str_detect(word, "달리다")) %>% View()
senti_word %>%
filter(str_detect(word, "급등")) %>% View()
senti_word %>%
filter(str_detect(word, "풀다")) %>% View()
senti_word %>%
filter(str_detect(word, "반도막")) %>% View()
senti_word %>%
filter(str_detect(word, "반토막")) %>% View()
senti_word %>%
filter(str_detect(word, "카카오톡")) %>% View()
senti_word %>%
filter(str_detect(word, "윤석열")) %>% View()
senti_word %>%
filter(str_detect(word, "완전")) %>% View()
senti_word %>%
filter(str_detect(word, "터지다")) %>% View()
senti_word %>%
filter(str_detect(word, "살리다")) %>% View()
senti_word %>%
filter(str_detect(word, "개잡주")) %>% View()
senti_word %>%
filter(str_detect(word, "올랐")) %>% View()
senti_word %>%
filter(str_detect(word, "힘내다")) %>% View()
senti_word %>%
filter(str_detect(word, "가즈아")) %>% View()
senti_word %>%
filter(str_detect(word, "탈세")) %>% View()
senti_word %>%
filter(str_detect(word, "회복")) %>% View()
senti_word %>%
filter(str_detect(word, "회복")) %>% View()
